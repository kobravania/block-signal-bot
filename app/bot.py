from aiogram import Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

from config import SUBSCRIPTION_PRICE, ADMIN_ID
from app.services.payments import create_charge
from app.services.alerts import create_alert
from app.services.calculator import position_size
from app.models import add_user, check_pro, get_all_users, set_pro

dp = Dispatcher()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å PRO")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="üì© –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
        [KeyboardButton(text="üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏")],
        [KeyboardButton(text="üîî –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç")],
    ],
    resize_keyboard=True
)


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start(message: types.Message):
    add_user(message.from_user.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é üëá",
        reply_markup=menu
    )


# --- –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ---
@dp.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å PRO")
@dp.message(Command("buy"))
async def buy(message: types.Message):
    charge = await create_charge(
        "PRO Subscription",
        "–î–æ—Å—Ç—É–ø –∫ PRO –Ω–∞ 30 –¥–Ω–µ–π",
        SUBSCRIPTION_PRICE
    )
    link = charge["data"]["hosted_url"]
    await message.answer(f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (10$ USDT TRC20): {link}")


# --- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å ---
@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
@dp.message(Command("status"))
async def status(message: types.Message):
    if check_pro(message.from_user.id):
        await message.answer("‚úÖ –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–µ–Ω PRO-–¥–æ—Å—Ç—É–ø.")
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π 'üí≥ –ö—É–ø–∏—Ç—å PRO'.")


# --- –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é ---
@dp.message(Command("menu"))
async def show_menu(message: types.Message):
    await message.answer(
        "üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=menu
    )


# --- –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª (—Ç–æ–ª—å–∫–æ PRO) ---
@dp.message(F.text == "üì© –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
@dp.message(Command("signal"))
async def signal(message: types.Message):
    if check_pro(message.from_user.id):
        await message.answer("üìà –°–∏–≥–Ω–∞–ª –¥–Ω—è: –ü–æ–∫—É–ø–∞–π BTC –ø—Ä–∏ –ø—Ä–æ–±–æ–µ $65,000 üöÄ")
    else:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å PRO –ø–æ–¥–ø–∏—Å–∫–æ–π.")


# --- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ ---
@dp.message(F.text == "üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏")
@dp.message(Command("calc"))
async def calc(message: types.Message):
    try:
        # –ø—Ä–∏–º–µ—Ä: /calc 1000 2 50
        _, deposit, risk_percent, stop_loss = message.text.split()
        deposit, risk_percent, stop_loss = float(deposit), float(risk_percent), float(stop_loss)
        size = position_size(deposit, risk_percent, stop_loss)
        await message.answer(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {size:.2f} USDT")
    except Exception:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /calc <–¥–µ–ø–æ–∑–∏—Ç> <—Ä–∏—Å–∫ %> <—Å—Ç–æ–ø>\n–ü—Ä–∏–º–µ—Ä: /calc 1000 2 50")


# --- –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ ---
@dp.message(F.text == "üîî –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç")
@dp.message(Command("alert"))
async def alert_cmd(message: types.Message):
    try:
        _, symbol, price = message.text.split()
        price = float(price)
        create_alert(message.from_user.id, symbol, price)
        await message.answer(f"üîî –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {symbol.upper()} –ø—Ä–∏ {price} USD")
    except Exception:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /alert <symbol> <price>\n–ü—Ä–∏–º–µ—Ä: /alert btc 65000")


# --- –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.message(Command("users"))
async def list_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    users = get_all_users()
    if not users:
        await message.answer("üì≠ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, is_pro in users:
        status = "‚úÖ PRO" if is_pro else "‚ùå FREE"
        text += f"üë§ user_id: {user_id} | {status}\n"

    await message.answer(text)


# --- –ê–¥–º–∏–Ω: –≤—ã–¥–∞—Ç—å PRO ---
@dp.message(Command("give_pro"))
async def give_pro(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    try:
        _, user_id = message.text.split()
        user_id = int(user_id)
    except:
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_pro <user_id>")

    set_pro(user_id, True)  # –¥–∞—ë–º PRO
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω PRO-–¥–æ—Å—Ç—É–ø")
